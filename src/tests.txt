Defines a Board class contains 25 Location instances
Board.java
Location.java
BoardTest.java
createBoardTest()


Correctly reads codenames from a file named GameWords.txt and stores them in a List [10 points] (sample files you can use are here and here)
wordsListMaker.java
wordsListMakerTest.java
listCheckerTest()


Creates List containing 25 distinct codenames selected at random [10 points] (hint: Java has some methods that could be a starting point for your implementation)
CodenamesList.java
CodenamesListTest.java
shuffleTest();


Creates List containing randomly generated assignments for each of the 9 Red Agents, 8 Blue Agents, 7 Innocent Bystanders, and 1 Assassin [10 points] (hint: Java has some methods that could be a starting point for how to randomly order locations)
PersonAssignments.java
PersonAssignmentsTest.java
testOne()


When game started, it is Red team's move and each of Board's 25 Location instances is assigned a codename, Person, and is Not Revealed [15 points]
assign.java
LocationAssignmentsTest.java


Method defined which correctly returns if a clue is legal or illegal (clues cannot equal a current codename unless that codename is in a locations that was already Revealed) [10 points]
assign.java
clue()
LocationAssignmentsTest.java
clueTest1()
clueTest2()
clueTest3()

Method defined which decrements the count, updates a Location when the Location's codename was selected, and returns if the Location contained the current team's Agent [10 points]
assign.java
updateLocation(Location theLocation)
LocationAssignmentsTest.java
turnTest()

Method defined which correctly returns whether or not the Board is in one of the winning states [15 points]
assign.java
winningState()
GameWinningStateTest.java
test1()
test2()
test3()
test4()

Method defined which correctly returns which team did not lose (i.e., win) when the Assassin was revealed [10 points]
assign.java
teamWon()
TeamWonTest.java
teamWonTest()
teamWonTestIfNotRevealed()

Creates a List containing randomly generated assignments for each of the 6 Red Agents, 5 Blue Agents, 5 Green Agents, 7 Innocent Bystanders, and 2 Assassins [3 points]
PersonAssignment2.java
ListTest()
assignmentTest()

Method defined which correctly returns whether or not the Board is in one of the winning states [5 points]
assign2.java
winningState()
WinningStateTestFor3Teamversion.java
test1()
test2()
test3()
test6()

Method defined which correctly returns which team wins once the 2nd Assassin is revealed [8 points]
assign2.java
teamWon()
test1()

Method which returns which is used at the end of a turn to determine the team whose move is next (this must include the possibility that the next team in the 3-team rotation had previously Revealed an Assassin) [7 points]
assign.java
changeTurn()
ChangeTurnTest.java
test1()

